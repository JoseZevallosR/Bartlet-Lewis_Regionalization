old_error[k_cluster]=current_error[k_cluster]
}
}
k_cluster=k_cluster+1 #counting clusters
}
#parameters=cbind(Stats[,1:2],parameters)
names(parameters)=c('a','l','v','k','f','mx')#c('x','y','a','l','v','k','f','mx')
old_parameters=data[,3:8]
data[,3:8]=parameters#check
}
data
}
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=2)
####################################
#######Repetitive Cross Validation##
####################################
repetitiveCV=function(times=1,data,Stats,Lmin,Lmax,fun=MBLRPM){
#data contains the intial parameter estimation
#stats is the rainfall statistics
#Estaciones cambiantes de intervalos
parameters=data[,3:8]
data_help=data
coordinates(data_help) <- ~x+y
proj4string(data_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist <- distm(data_help,fun = distHaversine)
vecinos=nearpoints(mdist)
range=clusterIDX(data)
old_error=rep(100,length(range))
current_error=numeric(length(range))
for (iter in 1:times){
print(paste("Number of cross validation iteration",as.character(iter)))
k_cluster=1
for (station in range){
print(paste('cluster :',as.character(k_cluster),'/',as.character(length(range))))
mistakes=c()
for (k in 1:6){#parameters, 6 in total
x <- idwCV(data[c(station,vecinos[[station]]),],parameter= c('a','l','v','k','f','mx')[k],power=2)
#Checking region error
sub=x[c('x','y','var1.pred','observed','residual')]
sub$porcentaje=abs(sub$residual)*100/sub$observed
sub$residual=NULL
sub$location=c(station,vecinos[[station]])
#median(sub$porcentaje)
good_neighbors=subset(sub,sub$porcentaje<30)
wrong_neigbors=subset(sub,sub$porcentaje>=30)
if (dim(wrong_neigbors)[1]!=0 & dim(good_neighbors)[1]!=0 ){
for (fix_id in wrong_neigbors$location){
Lmin[k,fix_id]=min(good_neighbors$var1.pred)
Lmax[k,fix_id]=max(good_neighbors$var1.pred)
mistakes=c(mistakes,fix_id) #add the wrong stations
}
}
}
n_parameters=length(mistakes)
mistakes=unique(mistakes)
if (length(mistakes)==0){
print('No parameters to correct')
}else{
current_error[k_cluster]=round(n_parameters*100/(6*length(sub$location)),2)
if(old_error[k_cluster]<current_error[k_cluster]){
print('Using old parameter with lower error')
print(paste("Incorrect parameters in the cluster:",as.character(n_parameters),'/',as.character(6*length(sub$location)),' (',as.character(old_error[k_cluster]),'%)'))
parameters[mistakes,]=old_parameters[mistakes,]
old_error[k_cluster]=old_error[k_cluster]
}else{
print(paste("Incorrect parameters in the cluster:",as.character(n_parameters),'/',as.character(6*length(sub$location)),' (',as.character(current_error[k_cluster]),'%)'))
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
parameters[mistakes,]=t(matrix(foreach(
i=mistakes,
.combine = 'c',
.packages = "HyetosMinute"
) %dopar% {
momentos=Stats[i,]
mean24 = momentos$mean24
var24 = momentos$var24
cov24lag1 =momentos$autocov24
pdr24=momentos$dryperiod24
var3=momentos$var3
var6=momentos$var6
var12=momentos$var12
var18=momentos$var18
par=fun(mean24,var24,cov24lag1,pdr24,var3,var6,var12,var18,Lmin[,i],Lmax[,i])
return(par)
},nrow = 6,ncol = length(mistakes)))
parallel::stopCluster(cl = my.cluster) #closing the cluster
old_error[k_cluster]=current_error[k_cluster]
}
}
k_cluster=k_cluster+1 #counting clusters
}
#parameters=cbind(Stats[,1:2],parameters)
names(parameters)=c('a','l','v','k','f','mx')#c('x','y','a','l','v','k','f','mx')
old_parameters=data[,3:8]
data[,3:8]=parameters#check
}
data
}
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=2)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=10)
################
#check clusters#
################
data=maps
data_help=data
coordinates(data_help) <- ~x+y
proj4string(data_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist <- distm(data_help,fun = distHaversine)
vecinos=nearpoints(mdist)
idx=clusterIDX(data)
for (clouster in idx){
print(data[c(clouster,vecinos[[clouster]]),])
}
dev.new()
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/plotHelpers.R')
a=expression(alpha)
l=expression(paste(lambda,'(1/hr)'))
v=expression(paste(upsilon,'(hr)'))
k=expression(kappa)
phi=expression(phi)
u=expression(paste(mu,'(mm/hr)'))
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/parametros-1.tif',11)
mapa1=plot_map(df.map,legenda,titulo = a)
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/parametros-2.tif',11)
mapa2=plot_map(df.map,legenda,titulo = l)
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/parametros-3.tif',11)
mapa3=plot_map(df.map,legenda,titulo = v)
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/parametros-4.tif',11)
mapa4=plot_map(df.map,legenda,titulo = k)
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/parametros-5.tif',11)
mapa5=plot_map(df.map,legenda,titulo = phi)
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/parametros-6.tif',11)
mapa6=plot_map(df.map,legenda,titulo = u)
grid.arrange(arrangeGrob(mapa1,mapa2,mapa3,mapa4,mapa5,mapa6,nrow = 2))
dev.new()
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/average_hours_between_storm.tif',11)
mapa1=plot_map(df.map,legenda,titulo = 'Average hours between storm')
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/average_storm_duration.tif',30)
mapa2=plot_map(df.map,legenda,titulo = 'Average storm duration')
c(df.map,legenda):=raster_to_df('d:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/average_rainfall_deph_storm.tif',11)
mapa3=plot_map(df.map,legenda,titulo = 'Average rain deph per storm')
grid.arrange(arrangeGrob(mapa1,mapa2,mapa3,nrow = 1))
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=10)
#Importing the regionalization functionality
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
n=dim(gauge_stats)[1]
n
validation_parameters=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv')#matrix(data=NA,nrow=n,ncol=6)
validation_parameters
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
validation_parameters=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv')#matrix(data=NA,nrow=n,ncol=6)
#validation_parameters=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters.csv')
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
try(for (i in 52:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
dim(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=20)
#Importing the regionalization functionality
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
n=dim(gauge_stats)[1]
validation_parameters=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv')#matrix(data=NA,nrow=n,ncol=6)
n
#Importing the regionalization functionality
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
n=dim(gauge_stats)[1]
n
validation_parameters=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv')#matrix(data=NA,nrow=n,ncol=6)
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
validation_parameters
try(for (i in 78:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
#Importing the regionalization functionality
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
n=dim(gauge_stats)[1]
#Importing the regionalization functionality
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
n=dim(gauge_stats)[1]
validation_parameters=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv')#matrix(data=NA,nrow=n,ncol=6)
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
try(for (i in 78:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
try(for (i in 78:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
repetitiveCV=function(times=1,data,Stats,Lmin,Lmax,fun=MBLRPM){
#data contains the intial parameter estimation
#stats is the rainfall statistics
#Estaciones cambiantes de intervalos
parameters=data[,3:8]
data_help=data
coordinates(data_help) <- ~x+y
proj4string(data_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist <- distm(data_help,fun = distHaversine)
vecinos=nearpoints(mdist)
range=clusterIDX(data)
old_error=rep(100,length(range))
current_error=numeric(length(range))
for (iter in 1:times){
print(paste("Number of cross validation iteration",as.character(iter)))
k_cluster=1
for (station in range){
print(paste('cluster :',as.character(k_cluster),'/',as.character(length(range))))
mistakes=c()
for (k in 1:6){#parameters, 6 in total
x <- idwCV(data[c(station,vecinos[[station]]),],parameter= c('a','l','v','k','f','mx')[k],power=2)
#Checking region error
sub=x[c('x','y','var1.pred','observed','residual')]
sub$porcentaje=abs(sub$residual)*100/sub$observed
sub$residual=NULL
sub$location=c(station,vecinos[[station]])
#median(sub$porcentaje)
good_neighbors=subset(sub,sub$porcentaje<30)
wrong_neigbors=subset(sub,sub$porcentaje>=30)
if (dim(wrong_neigbors)[1]!=0 & dim(good_neighbors)[1]!=0 ){
for (fix_id in wrong_neigbors$location){
Lmin[k,fix_id]=min(good_neighbors$var1.pred)
Lmax[k,fix_id]=max(good_neighbors$var1.pred)
mistakes=c(mistakes,fix_id) #add the wrong stations
}
}
}
n_parameters=length(mistakes)
mistakes=unique(mistakes)
if (length(mistakes)==0){
current_error[k_cluster]=0
print('No parameters to correct')
}else{
current_error[k_cluster]=round(n_parameters*100/(6*length(sub$location)),2)
if(old_error[k_cluster]<current_error[k_cluster]){
print('Using old parameter with lower error')
print(paste("Incorrect parameters in the cluster:",as.character(n_parameters),'/',as.character(6*length(sub$location)),' (',as.character(old_error[k_cluster]),'%)'))
parameters[mistakes,]=old_parameters[mistakes,]
old_error[k_cluster]=old_error[k_cluster]
}else{
print(paste("Incorrect parameters in the cluster:",as.character(n_parameters),'/',as.character(6*length(sub$location)),' (',as.character(current_error[k_cluster]),'%)'))
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
parameters[mistakes,]=t(matrix(foreach(
i=mistakes,
.combine = 'c',
.packages = "HyetosMinute"
) %dopar% {
momentos=Stats[i,]
mean24 = momentos$mean24
var24 = momentos$var24
cov24lag1 =momentos$autocov24
pdr24=momentos$dryperiod24
var3=momentos$var3
var6=momentos$var6
var12=momentos$var12
var18=momentos$var18
par=fun(mean24,var24,cov24lag1,pdr24,var3,var6,var12,var18,Lmin[,i],Lmax[,i])
return(par)
},nrow = 6,ncol = length(mistakes)))
parallel::stopCluster(cl = my.cluster) #closing the cluster
old_error[k_cluster]=current_error[k_cluster]
}
}
k_cluster=k_cluster+1 #counting clusters
}
#parameters=cbind(Stats[,1:2],parameters)
names(parameters)=c('a','l','v','k','f','mx')#c('x','y','a','l','v','k','f','mx')
old_parameters=data[,3:8]
data[,3:8]=parameters#check
#write.table(data,paste0("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/iteraciones/",'parameters_iter_',as.character(iter),'.csv'),sep = ',',row.names = F)
}
data
}
##########################################
###### Run Function#######################
##########################################
run=function(rain_stats,path,iterations=5,fun=MBLRPM){
#rain_stats: contains the rainfall statistics
#path: where to save the results
#Maskshape: Shape form of the final results
n=dim(rain_stats)[1]
#Maximum and minimum search parameters space
Lmin=matrix(c(1,0.001,0.001,0.001,0.0854,1),nrow = 6,ncol = n)
Lmax=matrix(c(4,0.1,0.1,0.1,0.1,20),nrow=6,ncol=n)
#print('Calculating the initial parameters ...')
#Initial parameters
parameters0=matrix(data=NA,nrow =n,ncol = 6)
n.cores <- parallel::detectCores() - 1
#create the cluster
my.cluster <- parallel::makeCluster(
n.cores,
type = "PSOCK"
)
#register it to be used by %dopar%
doParallel::registerDoParallel(cl = my.cluster)
parameters0=t(matrix(foreach(
i=1:n,
.combine = 'c',
.packages = "HyetosMinute"
) %dopar% {
momentos=rain_stats[i,]
mean24 = momentos$mean24
var24 = momentos$var24
cov24lag1 =momentos$autocov24
pdr24=momentos$dryperiod24
var3=momentos$var3
var6=momentos$var6
var12=momentos$var12
var18=momentos$var18
par=fun(mean24,var24,cov24lag1,pdr24,var3,var6,var12,var18,Lmin[,i],Lmax[,i])
return(par)
},nrow = 6,ncol = n))
parallel::stopCluster(cl = my.cluster) #closing the cluster
parameters=cbind(rain_stats[,1:2],parameters0)
names(parameters)=c('x','y','a','l','v','k','f','mx')
print('Reptitive Cross Validations ...')
CV_parameters=repetitiveCV(times = iterations,parameters,rain_stats,Lmin = Lmin ,Lmax = Lmax)
#saving the initial parameters
write.table(CV_parameters,paste0(path,'parameters01.csv'),sep = ',',row.names = F)
CV_parameters
}
##################
SimStats= function(parameters){
stats=matrix(data=NA,nrow = dim(parameters)[1],ncol = 16)
for (i in 1:dim(parameters)[1]){
par=parameters[i,]
par[2]<-par[2]*24
par[3]<-par[3]/24
par[6]=par[6]*24
est=numeric(16)
iter=0
for (j in c(24,3,6,12)){
m=meanMBLRPM(par[1],par[2],par[3],par[4],par[5],par[6],h=j/24)
v=varMBLRPM(par[1],par[2],par[3],par[4],par[5],par[6],h=j/24)
cov=covarMBLRPM(par[1],par[2],par[3],par[4],par[5],par[6],h=j/24)
pdr=pdrMBLRPM(par[1],par[2],par[3],par[4],par[5],h=j/24)
est[(1+iter*4):(4+iter*4)]=c(m,v,cov,pdr)
iter=iter+1
}
stats[i,]=as.numeric(est)
}
stats
}
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
#78
try(for (i in 79:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
#78
try(for (i in 79:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
#78,137
try(for (i in 138:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
#78,137
try(for (i in 138:n){
stats=gauge_stats[-i,]
station=gauge_stats[i,]
print(paste('Cross Validation: ',as.character(i)))
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters3.csv',sep=',',row.names = F)
})
0.02+0.07+0.01
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
inde_gauge=read.csv('"D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/ValidacionIndependiente/independent_gauges.csv')
inde_gauge=read.csv("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/ValidacionIndependiente/independent_gauges.csv")
head(inde_gauge)
inde_gauge=read.csv("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/ValidacionIndependiente/independent_gauges.csv",sep = ';')
head(inde_gauge)
inde_gauge=read.csv("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/ValidacionIndependiente/independent_gauges.csv",sep = ';')
head(inde_gauge)
inde_gauge=read.csv("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/ValidacionIndependiente/independent_gauges.csv",sep = ';')
head(inde_gauge)
names(inde_gauge)=c('x','y','gauge')
head(inde_gauge)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
gauge_loc=points_wgs84(inde_gauge)
plot(gauge_loc)
list.files("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/")
stack(list.files("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/"))
stack(list.files("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/",full.names = T))
cv_maps=stack(list.files("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_maps/",full.names = T))
gauge_par <-data.frame(raster::extract(cv_maps, gauge_loc))
gauge_par
help("data.frame")
names(gauge_par)=c('a','l','v','k','f','mx')
gauge_par
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/src/RMBLRP.R')
setwd("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/scripts")
info=read.csv('test.csv')
plot(Ecdf(info$Rainfall.mm))
gauge_par[1,]
precp_sim(gauge_par[1,],10)

id_dpto=id_dpto+1 #incremento del id del departamento
}
df=data.frame(Areas_dpto[,bio_code])
row.names(df)=departamentos$DEPARTAMEN
colnames(df)=biome_names
round(df,2)
}
df1=biome_area_dpto(PB_present)
df1
df1/1000
biome_area_dpto=function(modelo){
biome_names=c('BMHP','BSTS','PHUM','PARM'	,'MATM'	,'XPPU'	,'GLAC'	,'XPUN'	,'BYUN','PANT')
bio_code=c(1,2,3,4,5,6,8,9,13,14)
grado_1=111.32
tile_area=res(modelo)[1]*res(modelo)[2]*grado_1^2
Areas_dpto=matrix(data=0,nrow = length(departamentos$DEPARTAMEN),ncol = 14)
id_dpto=1
for (dpto in departamentos$DEPARTAMEN){
MaskShape=departamentos[departamentos$DEPARTAMEN==dpto,]
mapa=mask(modelo,MaskShape)
mapa=crop(mapa,MaskShape)
mapa[mapa<=0]=NA
array_biome=values(mapa)
for (uidx in unique(mapa)){
Areas_dpto[id_dpto,uidx]=length(array_biome[which(array_biome==uidx)])*tile_area
}
id_dpto=id_dpto+1 #incremento del id del departamento
}
df=data.frame(Areas_dpto[,bio_code])
row.names(df)=departamentos$DEPARTAMEN
colnames(df)=biome_names
round(df/1000,1)
}
departamentos=shapefile("D:/GCM_SENAMHI-2020/departamentos_peru/DEPARTAMENTOS.shp")
PB_present=raster('D:/GCM_SENAMHI-2020/dem/biomaRF.tif')
Acces=raster('D:/GCM_SENAMHI-2020/Potential_Biomes/PotentialBiomes-ACCES1-1-2035-2065.tif')
Hadgem=raster('D:/GCM_SENAMHI-2020/Potential_Biomes/PotentialBiomes-HADGEM2-1-2035-2065.tif')
Mpiesm=raster('D:/GCM_SENAMHI-2020/Potential_Biomes/PotentialBiomes-MPIESM-1-2035-2065.tif')
df1=biome_area_dpto(PB_present)
df1
library(raster)
library(RColorBrewer)
library(raster)
library(ggplot2)
biome_area_dpto=function(modelo){
biome_names=c('BMHP','BSTS','PHUM','PARM'	,'MATM'	,'XPPU'	,'GLAC'	,'XPUN'	,'BYUN','PANT')
bio_code=c(1,2,3,4,5,6,8,9,13,14)
grado_1=111.32
tile_area=res(modelo)[1]*res(modelo)[2]*grado_1^2
Areas_dpto=matrix(data=0,nrow = length(departamentos$DEPARTAMEN),ncol = 14)
id_dpto=1
for (dpto in departamentos$DEPARTAMEN){
MaskShape=departamentos[departamentos$DEPARTAMEN==dpto,]
mapa=mask(modelo,MaskShape)
mapa=crop(mapa,MaskShape)
mapa[mapa<=0]=NA
array_biome=values(mapa)
for (uidx in unique(mapa)){
Areas_dpto[id_dpto,uidx]=length(array_biome[which(array_biome==uidx)])*tile_area
}
id_dpto=id_dpto+1 #incremento del id del departamento
}
df=data.frame(Areas_dpto[,bio_code])
row.names(df)=departamentos$DEPARTAMEN
colnames(df)=biome_names
round(df/1000,1) #area in thousand of square - kilometers
}
departamentos=shapefile("D:/GCM_SENAMHI-2020/departamentos_peru/DEPARTAMENTOS.shp")
PB_present=raster('D:/GCM_SENAMHI-2020/dem/biomaRF.tif')
Acces=raster('D:/GCM_SENAMHI-2020/Potential_Biomes/PotentialBiomes-ACCES1-1-2035-2065.tif')
Hadgem=raster('D:/GCM_SENAMHI-2020/Potential_Biomes/PotentialBiomes-HADGEM2-1-2035-2065.tif')
Mpiesm=raster('D:/GCM_SENAMHI-2020/Potential_Biomes/PotentialBiomes-MPIESM-1-2035-2065.tif')
df1=biome_area_dpto(PB_present)
modelos=c(Acces,Hadgem,Mpiesm)
GCM_Areas=list()
iter=1
mean_DF=function(list_DF){
suma=0
n=length(list_DF)
for ( i in 1:n){
suma=suma+list_DF[[i]]
}
return(suma/n)
}
for (model in modelos){
GCM_Areas[[iter]]=biome_area_dpto(modelo = model)
iter=iter+1
}
future_mean=round(mean_DF(GCM_Areas),1)
future_mean
df1-future_mean
future_mean-df1
write.table(df1,"C:/Users/jose/Dropbox/BIOMAS_25_Meses/Informes/informe 7/present_area_dpto.csv",sep=',')
write.table(future_mean,"C:/Users/jose/Dropbox/BIOMAS_25_Meses/Informes/informe 7/future_area_dpto.csv",sep=',')
write.table(future_mean-df1,"C:/Users/jose/Dropbox/BIOMAS_25_Meses/Informes/informe 7/future_diferencia_presente_area_dpto.csv",sep=',')
b=function(Q,yc){
Q/(yc^3*9.81)
}
b=function(Q,yc){
Q/(yc^3*32.2)
}
(q^2/32.2)^(1/3)
y=yc(150,4)
yc=function(Q,b){
q=Q/b
(q^2/32.2)^(1/3)
}
y=yc(150,4)
y
b(150,y)
b(150,2.66)
b=function(Q,yc){
Q/(yc^3*32.2)**.5
}
b(150,2.66)
b=function(Q,yc){
Q/(yc^3*32.2)^.5
}
b(150,2.66)
pp=rnorm(1000,20,3)
plot(pp,type='l')
for (i in 1:10){
print(tanh(10/i))
}
for (i in 1:20){
print(tanh(10/i))
}
lista=numeric()
lista=numeric()
for (i in 1:20){
lista[i]=tanh(10/i)
}
plot(lista)
lista=numeric()
for (i in 1:20){
lista[i]=tanh(i/2)
}
plot(lista)
library(extRemes)
library(raster)
library("HyetosMinute")
library(geosphere)
#Shape with the shape peru to make a mask
setwd("~/ILA_NORMA/Modelo/Regionalizacion/peru/")
peru=shapefile('StudyArea.shp')
source('RegionalizationModule.R')
#Importing the regionalization functionality
setwd("~/ILA_NORMA/Modelo/Regionalizacion")
#Mixed stats from gauge stations and corrected TRMM
Gauge=read.csv('DatosMixtosFinal_v2.csv')
x=Gauge
coordinates(x) <- ~x+y
proj4string(x)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist <- distm(x) #the answer is in meters
mdist
dim(mdist)
dim(x)
x
distance=list()
for (i in 1:dim(mdist)[1]){
#values=sort(mdist[i,])[2:(1+near)]
#values=sort(mdist[i,][mdist[i,]<=median(median(mdist[i,]))])
values=sort(mdist[i,])
values=tail(values, -1)
condition=values[values<60000]#vecinos en menos de 50 km
near=numeric(length(condition))
for (j in 1:length(condition)){
near[j]=which(mdist[i,]==condition[j])[1]
}
distance[[i]]=near
}
distance
mdist
filter_Neigbors=function(data,min_n,radio=60000){
#Return the statins with at least n neighbors
#data= location of the stations
#min_n= number of minumun neighbors required
data_help=data
coordinates(data_help) <- ~x+y
mdist <- distm(data_help,fun = distHaversine)
neighbors=list()
distance_vec=c()
for (j in 1:dim(mdist)[1]){
neighbors[[j]]=mdist[j,][mdist[j,]<radio]
distance_vec=c(distance_vec,length(neighbors[[j]]))
}
stations=data[distance_vec>=3,]
stations
}
filter_Neigbors(Gauge,3)
dim(Gauge)
dim(filter_Neigbors(Gauge,3))
dim(filter_Neigbors(Gauge,4))
dim(filter_Neigbors(Gauge,5))
dim(filter_Neigbors(Gauge,10))
dim(filter_Neigbors(Gauge,3,radio=10000))
dim(filter_Neigbors(Gauge,3,radio=50000))
dim(filter_Neigbors(Gauge,4,radio=50000))
dim(filter_Neigbors(Gauge,9,radio=50000))
dim(filter_Neigbors(Gauge,20,radio=50000))
dim(filter_Neigbors(Gauge,10000,radio=50000))
filter_Neigbors=function(data,min_n,radio=60000){
#Return the statins with at least n neighbors
#data= location of the stations
#min_n= number of minumun neighbors required
data_help=data
coordinates(data_help) <- ~x+y
mdist <- distm(data_help,fun = distHaversine)
neighbors=list()
distance_vec=c()
for (j in 1:dim(mdist)[1]){
neighbors[[j]]=mdist[j,][mdist[j,]<radio]
distance_vec=c(distance_vec,length(neighbors[[j]]))
}
stations=data[distance_vec>=min_n,]
stations
}
dim(filter_Neigbors(Gauge,10000,radio=50000))
dim(filter_Neigbors(Gauge,3,radio=50000))
dim(filter_Neigbors(Gauge,4,radio=50000))
dim(filter_Neigbors(Gauge,5,radio=50000))
data_help=Gauge
coordinates(data_help) <- ~x+y
mdist <- distm(data_help,fun = distHaversine)
neighbors=list()
distance_vec=c()
j=1
mdist[j,]
radio=60000
mdist[j,][mdist[j,]<radio]
neighbors[[j]]=mdist[j,][mdist[j,]<radio]
distance_vec=c(distance_vec,length(neighbors[[j]]))
distance_vec
neighbors=list()
distance_vec=c()
for (j in 1:dim(mdist)[1]){
neighbors[[j]]=mdist[j,][mdist[j,]<radio]
distance_vec=c(distance_vec,length(neighbors[[j]]))
}
distance_vec
nearpoints=function(mdist,radio=60000){
#Return the index of the closest gauge station to each station
#mdist = matrix of distance in meters
#radio is the maximum distance allowed among station
distance=list()
for (i in 1:dim(mdist)[1]){
values=sort(mdist[i,])
values=tail(values, -1)
condition=values[values<radio]
near=numeric(length(condition))
for (j in 1:length(condition)){
near[j]=which(mdist[i,]==condition[j])[1]
}
distance[[i]]=near
}
distance
}
nearpoints(mdist)
ff=nearpoints(mdist)
ff
length(ff)
lengths(ff)
filter_Neigbors=function(data,min_n=3,radio=60000){
#Return the statins with at least n neighbors
#data= location of the stations
#min_n= number of minumun neighbors required
data_help=data
coordinates(data_help) <- ~x+y
mdist <- distm(data_help,fun = distHaversine)
neighbors=nearpoints(mdist,radio=radio)
stations=data[lengths(neighbors)>=min_n,]
stations
}
filter_Neigbors(Gauge)
dim(filter_Neigbors(Gauge))
setwd("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code")
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RegionalizationModule.R')
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats
dim(gauge_stats)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters",iterations=5)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters",iterations=1)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters",iterations=1)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/",iterations=1)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/",iterations=1)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/",iterations=1)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/",iterations=1)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/",iterations=1)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/",iterations=1)
maps
class(maps)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/",iterations=1)
path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters/"
setwd(path)
path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_parameters"
setwd(path)
setwd("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters")
path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters"
setwd(path)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
dim(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=1)
#Importing the regionalization functionality
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
n=dim(gauge_stats)[1]
validation_parameters=matrix(data=NA,nrow=n,ncol=6)
validation_parameters
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
n=dim(gauge_stats)[1]
validation_parameters=matrix(data=NA,nrow=n,ncol=6)
setwd("D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation")
n
validation_parameters=matrix(data=NA,nrow=n,ncol=6)
try(for (i in 1:n){
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
stats=gauge_stats[-i,]
station=gauge_stats[i,]
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalizations/output/CV_validation/",iterations=1))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^power/denominador)
}
print(paste('Cross Validation: ',as.character(i)))
write.table(parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters.csv',sep=',',row.names = F)
})
CV_parameters
try(for (i in 1:n){
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
stats=gauge_stats[-i,]
station=gauge_stats[i,]
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=1))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^power/denominador)
}
print(paste('Cross Validation: ',as.character(i)))
write.table(parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters.csv',sep=',',row.names = F)
})
CV_parameters
dim(CV_parameters)
n
try(for (i in 1:n){
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
stats=gauge_stats[-i,]
station=gauge_stats[i,]
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=1))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
print(paste('Cross Validation: ',as.character(i)))
write.table(parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters.csv',sep=',',row.names = F)
})
try(for (i in 1:n){
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
stats=gauge_stats[-i,]
station=gauge_stats[i,]
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=1))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
print(paste('Cross Validation: ',as.character(i)))
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters.csv',sep=',',row.names = F)
})
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=10)
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
dim(gauge_stats)
maps=run(rain_stats=gauge_stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_parameters/",iterations=10)
maps
#Importing the regionalization functionality
source('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/code/RMBLRP.R')
#Mixed stats from gauge stations and corrected TRMM
gauge_stats=read.csv('D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/data/gauge_stats.csv')
gauge_stats=kickOutliers(gauge_stats)
gauge_stats=filter_Neigbors(gauge_stats)
n=dim(gauge_stats)[1]
validation_parameters=matrix(data=NA,nrow=n,ncol=6)
try(for (i in 1:n){
gauge_help=gauge_stats
coordinates(gauge_help) <- ~x+y
proj4string(gauge_help)='+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'
mdist=distm(gauge_help)
stats=gauge_stats[-i,]
station=gauge_stats[i,]
CV_parameters=try(run(stats,path="D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/",iterations=5))
for (j in 1:6){
info=CV_parameters[[c('a','l','v','k','f','mx')[j]]]
denominador=sum((1/mdist[i,-i])^2)
validation_parameters[i,j]=sum(info/mdist[i,-i]^2/denominador)
}
print(paste('Cross Validation: ',as.character(i)))
write.table(validation_parameters,'D:/Proyectos_GitHub/Bartlet-Lewis_Regionalization/output/CV_validation/CrossValidationParameters.csv',sep=',',row.names = F)
})
